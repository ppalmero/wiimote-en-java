/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectocursomaestria;

import wiiusej.WiiUseApiManager;
import wiiusej.Wiimote;
import wiiusej.values.GForce;
import wiiusej.values.Orientation;
import wiiusej.values.RawAcceleration;
import wiiusej.wiiusejevents.physicalevents.ButtonsEvent;
import wiiusej.wiiusejevents.physicalevents.ExpansionEvent;
import wiiusej.wiiusejevents.physicalevents.IREvent;
import wiiusej.wiiusejevents.physicalevents.JoystickEvent;
import wiiusej.wiiusejevents.physicalevents.MotionSensingEvent;
import wiiusej.wiiusejevents.physicalevents.NunchukButtonsEvent;
import wiiusej.wiiusejevents.physicalevents.NunchukEvent;
import wiiusej.wiiusejevents.physicalevents.WiimoteButtonsEvent;
import wiiusej.wiiusejevents.utils.WiimoteListener;
import wiiusej.wiiusejevents.wiiuseapievents.ClassicControllerInsertedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.ClassicControllerRemovedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.DisconnectionEvent;
import wiiusej.wiiusejevents.wiiuseapievents.GuitarHeroInsertedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.GuitarHeroRemovedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.NunchukInsertedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.NunchukRemovedEvent;
import wiiusej.wiiusejevents.wiiuseapievents.StatusEvent;

/**
 *
 * @author pablo
 */
public class Ventana extends javax.swing.JFrame implements WiimoteListener {

    static {
        try {
            System.loadLibrary("wiiuse");
        } catch (UnsatisfiedLinkError e) {
            System.err.println("wiiuse library failed to load\n" + e);
            System.exit(1);
        }
    }

    private int eventCount = 0;
    private boolean showStatus = true;
    private boolean showMotionSettings = true;
    private final ControlaTiempos ct;
    private Wiimote wiimote = null;
    private long camina;
    private boolean retrocedio = true;
    private boolean avanzo = false;

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        ct = new ControlaTiempos();
        Wiimote[] wiimotes = WiiUseApiManager.getWiimotes(1, false);
        if ((wiimotes == null) || (wiimotes.length == 0)) {
            System.out.println("No wiimote found");
            return;
        } else {
            System.out.println("No. of wiimotes found: " + wiimotes.length);
        }

        wiimote = wiimotes[0];
        initWiimote();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        gifMove1 = new proyectocursomaestria.GifMove();
        jtbComer = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        gifMove1.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        jPanel1.add(gifMove1, gridBagConstraints);

        jtbComer.setText("Conectar Wiimote");
        jtbComer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbComerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel1.add(jtbComer, gridBagConstraints);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtbComerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbComerActionPerformed
        //jtbCaminar.setSelected(false);
        //gifMove1.comer(jtbComer.isSelected());
        Wiimote[] listWiimote = WiiUseApiManager.getWiimotes(1, true);
        if (listWiimote != null && listWiimote.length > 0) {
            wiimote = listWiimote[0];
            initWiimote();
            jtbComer.setSelected(false);
        }
    }//GEN-LAST:event_jtbComerActionPerformed

    @Override
    public void onButtonsEvent(WiimoteButtonsEvent e) {
        // say goodbye using "A"
        if (e.isButtonAPressed()) {
            WiiUseApiManager.shutdown();
            System.out.println("Wiimote shutdown: Caminó " + ct.gettCaminarTotal()
                    + " y comió " + ct.gettComerTotal());
            System.exit(0);
        }
    }

    @Override
    public void onMotionSensingEvent(MotionSensingEvent e) {
        if (showMotionSettings) {    // report only at start-up
            reportMotionSettings(e);
            showMotionSettings = false;
        }

        Orientation ori = e.getOrientation();
        /*System.out.printf("%d. Pitch(x): %.1f  Roll(y): %.1f  Yaw(z): %.1f\n", 
               eventCount++, ori.getPitch(), ori.getRoll(), ori.getYaw());  
        /* roll and pitch range is -180 to 180 degrees;               
           yaw is -26 to 26 degrees (only works if IR sensing is activated)
             roll: around y-axis
             pitch: around x-axis
             yaw: around z-axis
         */
        if (ori.getPitch() > 100 && ori.getPitch() < 180) {// pie en retroceso
            retrocedio = true;
            System.out.println("Retrocedió - caminando: " + gifMove1.isCaminando());
            if (gifMove1.isCaminando() && avanzo) {
                gifMove1.getImagenSiguiente();
                avanzo = false;
            }
        } else if (ori.getPitch() < 80 && ori.getPitch() > 0 && retrocedio) {
            System.out.println("Avanzó - caminando: " + gifMove1.isCaminando());
            if (!gifMove1.isCaminando()) {
                ct.inciarCaminar();
                ct.finComer();
            }
            gifMove1.caminar(true);
            camina = System.currentTimeMillis();
            retrocedio = false;
            avanzo = true;
        } /*else if (ori.getPitch() > 85 && ori.getPitch() < 95 && gifMove1.isCaminando()) {
            gifMove1.getImagenSiguiente();
        }*/

        //GForce gforce = e.getGforce();    // in range +/- 3 gravity units
        // System.out.printf("       %d. Gravity z: %.2f\n", eventCount++, gforce.getZ());  
        //System.out.printf("       %d. Gravity x: %.2f  y: %.2f  z: %.2f\n", 
        //             eventCount++, gforce.getX(), gforce.getY(), gforce.getZ());  
        //reportFlicks(gforce);
        //RawAcceleration ra = e.getRawAcceleration();
        //System.out.println("  " + ra);
        // zero raw acceleration is reported as 0x80, 128
        if (gifMove1.isCaminando()) {
            if ((System.currentTimeMillis() - camina) > 3000) {//dejó de caminar
                System.out.println("Dejó de caminar");
                gifMove1.caminar(false);
                ct.finCaminar();
            }
        } /*else if ((ori.getPitch() > 70) && (ori.getPitch() < 110)) {//No está caminando - agacha cabeza
            if (!gifMove1.isComiendo()) {
                gifMove1.comer(true);
                ct.inciarComer();
            }

        } else if (!((ori.getPitch() > 70) && (ori.getPitch() < 110))) {//levanta la cabeza
            gifMove1.comer(false);
            ct.finComer();
        }*/
    }  // end of onMotionSensingEvent()

    private void reportMotionSettings(MotionSensingEvent e) {
        System.out.println("============ Motion Sensing Settings ================");
        System.out.println("Orientation threshold: " + e.getOrientationThreshold());
        System.out.println("Acceleration threshold: " + e.getAccelerationThreshold());

        if (e.isSmoothingActive()) {
            System.out.println("Alpha smoothing: " + e.getAlphaSmoothing());
        } else {
            System.out.println("Smoothing not active");
        }
        System.out.println();
    }  // end of reportMotionSettings()

    private void reportFlicks(GForce gf) // convert g-forces into movement directions
    {
        float xForce = gf.getX();
        if (xForce > 1.5f) {
            System.out.println("Right");
        } else if (xForce < -1.5f) {
            System.out.println("Left");
        }

        float yForce = gf.getY();
        if (yForce > 1.5f) {
            System.out.println(eventCount++ + ".  Forward");
        } else if (yForce < -1.5f) {
            System.out.println("  Back");
        }

        float zForce = gf.getZ();
        if (zForce > 1.0f) {
            System.out.println("    Down");
        } else if (zForce < 0f) {
            System.out.println("    Up");
        }
    }  // end of reportFlicks()

    @Override
    public void onStatusEvent(StatusEvent e) {
        if (showStatus) {
            System.out.println("\n" + e);
            showStatus = false;
        }
    }

    @Override
    public void onIrEvent(IREvent e) {
    }

    @Override
    public void onDisconnectionEvent(DisconnectionEvent e) {
    }

    @Override
    public void onExpansionEvent(ExpansionEvent e) {// cast expansion event to a Nunchuk event, then process it
        if (e instanceof NunchukEvent) {
            processNunchuk((NunchukEvent) e);
        } else {
            System.out.println("Unknown Expansion Event: " + e);
        }
    }

    private void processNunchuk(NunchukEvent ne) {
        if (ne.isThereNunchukJoystickEvent()) {
// joystick
            JoystickEvent je = ne.getNunchukJoystickEvent();
            float magnitude = je.getMagnitude();
            if (magnitude > 0.1) {
                System.out.printf("Joystick angle %.1f; magnitude: %.2f\n",
                        je.getAngle(), magnitude);
            }
        }
        NunchukButtonsEvent nbe = ne.getButtonsEvent();
        if (haveButtonsChanged(nbe)) {
            nunchukButtons(nbe);
        }
// button
        if (ne.isThereMotionSensingEvent()) {
// motion
            MotionSensingEvent nme = ne.getNunchukMotionSensingEvent();
            Orientation ori = nme.getOrientation();
// System.out.printf("%d. Pitch(x): %.1f Roll(y): %.1f Yaw(z): %.1f\n",
// eventCount++, ori.getPitch(), ori.getRoll(), ori.getYaw());
// yaw is always 0 for the nunchuk

            if ((ori.getPitch() > 80) && (ori.getPitch() < 100) && !gifMove1.isCaminando()) {//No está caminando - agacha cabeza
                if (!gifMove1.isComiendo()) {
                    ct.inciarComer();
                    gifMove1.comer(true);
                }

            } else if ((ori.getPitch() < 70) && (ori.getPitch() > 0)) {//levanta la cabeza
                gifMove1.comer(false);
                ct.finComer();
            }

            //GForce gforce = nme.getGforce();
// System.out.printf("%d. Gravity x: %.2f y: %.2f z: %.2f\n",
// eventCount++, gforce.getX(), gforce.getY(), gforce.getZ());
            //RawAcceleration ra = nme.getRawAcceleration();
// System.out.println(" " + ra);
        }
    }

    private boolean haveButtonsChanged(ButtonsEvent e) {
        return ((e.getButtonsJustPressed() != 0)
                || (e.getButtonsJustReleased() != 0)
                || (e.getButtonsHeld() != 0));
    }

    private void nunchukButtons(NunchukButtonsEvent e) {
        if (e.isButtonCJustPressed()) {
            System.out.println("C pressed");
        }
        if (e.isButtonCHeld()) {
            System.out.println("+ C held");
        }
        if (e.isButtonCJustReleased()) {
            System.out.println(" C released");
        }
        if (e.isButtonZJustPressed()) {
            System.out.println("Z pressed");
        }
        if (e.isButtonZeHeld()) // note spelling mistake
        {
            System.out.println("+ Z held");
        }
        if (e.isButtonZJustReleased()) {
            System.out.println(" Z released");
        }
    } // end of nunchukButtons()
// end of processNunchuk()

    @Override
    public void onClassicControllerInsertedEvent(ClassicControllerInsertedEvent e) {
    }

    @Override
    public void onClassicControllerRemovedEvent(ClassicControllerRemovedEvent e) {
    }

    @Override
    public void onGuitarHeroInsertedEvent(GuitarHeroInsertedEvent e) {
    }

    @Override
    public void onGuitarHeroRemovedEvent(GuitarHeroRemovedEvent e) {
    }

    @Override
    public void onNunchukInsertedEvent(NunchukInsertedEvent e) {
    }

    @Override
    public void onNunchukRemovedEvent(NunchukRemovedEvent e) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private proyectocursomaestria.GifMove gifMove1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton jtbComer;
    // End of variables declaration//GEN-END:variables

    private void initWiimote() {
        wiimote.setTimeout((short) 20, (short) 20);     // default of 10 causes packet timeouts

        wiimote.activateMotionSensing();
        // onMotionSensingEvent() will be called, repeatedly

        // wiimote.activateIRTRacking();   // needed to generate yaw information
        /*wiimote.setOrientationThreshold(3.0f);    // was 0.5 degrees
        wiimote.setAccelerationThreshold(10);      // default is 5
        wiimote.activateSmoothing();
        wiimote.setAlphaSmoothingValue(0.2f);*/
        wiimote.setOrientationThreshold(0.5f);    // was 0.5 degrees
        wiimote.setAccelerationThreshold(5);      // default is 5
        wiimote.activateSmoothing();
        wiimote.setAlphaSmoothingValue(0.07f);
        // Accelerometer smoothing [0-1]; was 0.07
        /* Accelerometers produce a lot of noise, so to reduce this wiiuse 
         has implemented an exponential moving average for each angle.
         setAlphaSmoothingValue() changes the alpha value of the equation.
         */

        wiimote.addWiiMoteEventListeners(this);
        wiimote.getStatus();
    }
}
